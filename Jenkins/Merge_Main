pipeline {
    agent any
    
    parameters {
        string(name: 'branch_name', defaultValue: 'm', description: 'Branch to build from')
    }

    environment {
        DOCKER_REGISTRY = 'docker.io'  
        DOCKER_IMAGE = 'manikandan29/assignment'   
        DOCKER_CREDENTIALS = credentials('dockerhub-creds')
        IMAGE_TAG = 'latest'
    }

    stages {
        stage('Verify Branch') {
            steps {
                script {
                    def branch = "${params.branch_name}".replace('refs/heads/', '')
                    if ( branch != 'main') {
                        echo "This build is running on branch '${branch}' , skipping the pipeline as it's not 'main'."
                        currentBuild.result = 'SUCCESS'
                        error("Skipping build for non-main branch.")
                    } else {
                        echo "Verified main branch. Continuing pipeline..."
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    echo 'Checking out code from GitHub...'
                    git branch: 'main', url: 'https://github.com/Manikandan2907/Assignment-App.git'
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo 'Building and testing the application...'
                    sh './mvnw clean install -DskipTests' //Skipping the tests as they are already completed at the PR itself. 
                }
            }
        }

        stage('Build, Scan, and Push Docker Image') {
            steps {
                script {

                    echo "Building Docker Image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
                    sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."

                    echo 'Scanning Docker Image for vulnerabilities using Trivy...'
                    sh "trivy image --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${IMAGE_TAG}"

                    echo 'Pushing Docker Image to DockerHub...'
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker tag ${DOCKER_IMAGE}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }
    }
}
